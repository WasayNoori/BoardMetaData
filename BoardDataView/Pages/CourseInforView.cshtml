@page
@{
    //ViewData["Title"] = "Pure Data View";
    Layout = null; // Explicitly remove layout to have no navbar/header/footer
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Board Data View</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
</head>
<body>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
           @*  <h2>Pure Data View - API Demo</h2>
            <p class="text-muted">This page demonstrates pure frontend + API approach</p>
             *@
         @*    <!-- Success/Error Messages -->
            <div id="successMessage" class="alert alert-success" style="display: none;">
                <span id="successText"></span>
            </div>
            <div id="errorMessage" class="alert alert-danger" style="display: none;">
                <span id="errorText"></span>
            </div> *@
            
            <!-- Board Info Card -->
          @*   <div class="card shadow mb-4">
                <div class="card-header bg-info text-white">
                    <h4 class="mb-0">Board Information</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="boardIdDisplay" class="form-label">Board ID:</label>
                            <input type="text" id="boardIdDisplay" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <button id="loadCourseInstanceBtn" class="btn btn-primary mt-4">
                                <i class="bi bi-search"></i> Load Course Instance
                            </button>
                        </div>
                    </div>
                </div>
            </div> *@

            <!-- Course Instance Form -->
            <div class="card shadow mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Course Data</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="courseDropdown" class="form-label">Course:</label>
                            <select id="courseDropdown" class="form-select">
                                <option value="">Loading courses...</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="versionTitle" class="form-label">Version Title:</label>
                            <input type="text" id="versionTitle" class="form-control" maxlength="100">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="languageDropdown" class="form-label">Language:</label>
                            <select id="languageDropdown" class="form-select">
                                <option value="">Loading languages...</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="productDropdown" class="form-label">Product:</label>
                            <select id="productDropdown" class="form-select">
                                <option value="">Loading products...</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="instructorDropdown" class="form-label">Instructor:</label>
                            <select id="instructorDropdown" class="form-select">
                                <option value="">Loading instructors...</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Data Status:</label>
                            <p id="dataStatus" class="text-muted">No data loaded</p>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label for="description" class="form-label">Description:</label>
                            <textarea id="description" class="form-control" rows="3" placeholder="Enter description..."></textarea>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label for="lessons" class="form-label">Lessons:</label>
                            <input type="number" id="lessons" class="form-control" min="0" placeholder="Number of lessons">
                        </div>
                        <div class="col-md-9 mb-3">
                            <label for="fileLocation" class="form-label">File Location:</label>
                            <input type="text" id="fileLocation" class="form-control" placeholder="Enter file location or path...">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="revisionFlip">
                                <label class="form-check-label" for="revisionFlip">
                                    Revision Flip
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12">
                            <!-- Edit Mode Buttons (shown when editing) -->
                            <div id="editModeButtons" style="display: none;">
                                <button id="saveBtn" class="btn btn-success me-2">
                                    <i class="bi bi-check-circle"></i> Save
                                </button>
                                <button id="cancelBtn" class="btn btn-secondary">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                            </div>
                            
                            <!-- Read-Only Mode Buttons (shown when viewing) -->
                            <div id="readOnlyButtons" style="display: none;">
                                <button id="editBtn" class="btn btn-primary me-2">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button id="refreshAllBtn" class="btn btn-secondary">
                                    <i class="bi bi-arrow-clockwise"></i> Refresh
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    <!-- Load jQuery first -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Load Monday SDK -->
    <script src="https://cdn.jsdelivr.net/npm/monday-sdk-js/dist/main.min.js"></script>
    
    <script>
        // Global variables
        var currentBoardId = null;
        var isEditMode = false;
        var originalData = null; // Store original data for cancel functionality

        // This runs when the page loads
        $(document).ready(function() {
            console.log("Pure Data View page loaded");
            
            // Load all dropdown data first
            loadAllDropdownData();
            
            // Show some buttons initially for debugging
            console.log("Setting initial button state...");
            $('#readOnlyButtons').show(); // Show read-only buttons initially
            
            // For development, try to load board ID from settings immediately
            // For production, Monday SDK will override this
            console.log("Attempting to load board ID from development settings...");
            loadBoardIdFromSettings();
            
            // Set up event handlers
            $('#loadCourseInstanceBtn').click(function() {
                if (currentBoardId) {
                    loadCourseInstance(currentBoardId);
                } else {
                    showMessage('No Board ID available', 'error');
                }
            });
            
            $('#refreshAllBtn').click(function() {
                loadAllDropdownData().then(function() {
                    if (currentBoardId) {
                        loadCourseInstance(currentBoardId);
                    }
                });
            });
            
            $('#editBtn').click(function() {
                enterEditMode();
            });
            
            $('#saveBtn').click(function() {
                saveCourseInstance();
            });
            
            $('#cancelBtn').click(function() {
                cancelEdit();
            });
        });

        // Initialize the application with a board ID (from Monday or development settings)
        function initializeApp(boardId) {
            console.log("initializeApp called with boardId:", boardId);
            currentBoardId = boardId;
            $('#boardIdDisplay').val(currentBoardId);
            
            if (isMondayContext) {
                $('#dataStatus').text('Board ID loaded from Monday.com');
                console.log("Board ID source: Monday.com");
            } else {
                $('#dataStatus').text('Board ID loaded from development configuration');
                console.log("Board ID source: Development configuration");
            }
            
            console.log("App initialized with Board ID:", currentBoardId);
            
            // WAIT for dropdown data to finish loading before loading course instance
            console.log("Waiting for dropdown data to complete before loading course instance...");
            
            // Check if dropdown loading is still in progress
            loadAllDropdownData().then(function() {
                console.log("Dropdown data is ready, now loading course instance...");
                loadCourseInstance(currentBoardId);
            }).catch(function(error) {
                console.error("Error ensuring dropdown data:", error);
                // Still try to load course instance even if dropdowns failed
                loadCourseInstance(currentBoardId);
            });
        }

        // Load Board ID from appsettings via API (development mode only)
        function loadBoardIdFromSettings() {
            console.log("Calling development board ID API...");
            $.ajax({
                url: '/api/API/boardid',
                type: 'GET',
                success: function(response) {
                    console.log("Board ID loaded from development API:", response);
                    if (response && response.boardId) {
                        console.log("Successfully got board ID:", response.boardId);
                        initializeApp(response.boardId);
                    } else {
                        console.error("Invalid response from board ID API:", response);
                        showMessage('Invalid response from development API', 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Board ID API error details:", {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        responseText: xhr.responseText,
                        error: error
                    });
                    
                    if (xhr.status === 400) {
                        // Production environment - Board ID should come from Monday
                        console.log("Production environment detected - waiting for Monday.com board ID");
                        $('#dataStatus').html('<span class="text-warning">⏳ Waiting for Monday.com board ID...</span>');
                        showMessage('This app must be embedded in Monday.com to work in production', 'warning');
                    } else if (xhr.status === 404) {
                        console.log("Board ID API endpoint not found");
                        showMessage('Board ID API endpoint not found', 'error');
                    } else {
                        // Development environment but API failed - use fallback
                        console.log("Development API failed - using hardcoded fallback from appsettings");
                        initializeApp("1234567"); // Match appsettings.Development.json value
                        showMessage('Development API failed - using fallback Board ID: 1234567', 'info');
                    }
                }
            });
        }

        // Load all dropdown data in parallel
        function loadAllDropdownData() {
            console.log('Starting to load all dropdown data...');
            showMessage('Loading dropdown data...', 'info');
            
            // Return the promise so we can chain operations
            return Promise.all([
                loadCourses(),
                loadLanguages(), 
                loadProducts(),
                loadInstructors()
            ]).then(function(results) {
                console.log('All dropdown data loaded successfully!', results);
                showMessage('All dropdown data loaded successfully!', 'success');
                return results;
            }).catch(function(error) {
                console.error('Error loading dropdown data:', error);
                showMessage('Error loading some dropdown data: ' + error.message, 'error');
                throw error; // Re-throw so calling code knows it failed
            });
        }

        // Load courses dropdown
        function loadCourses() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/api/API/courses',
                    type: 'GET',
                    success: function(courses) {
                        populateDropdown('#courseDropdown', courses, '-- Select Course --');
                        resolve(courses);
                    },
                    error: function(xhr, status, error) {
                        $('#courseDropdown').html('<option value="">Error loading courses</option>');
                        reject(error);
                    }
                });
            });
        }

        // Load languages dropdown
        function loadLanguages() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/api/API/languages',
                    type: 'GET',
                    success: function(languages) {
                        populateDropdown('#languageDropdown', languages, '-- Select Language --');
                        resolve(languages);
                    },
                    error: function(xhr, status, error) {
                        $('#languageDropdown').html('<option value="">Error loading languages</option>');
                        reject(error);
                    }
                });
            });
        }

        // Load products dropdown
        function loadProducts() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/api/API/products',
                    type: 'GET',
                    success: function(products) {
                        populateDropdown('#productDropdown', products, '-- Select Product --');
                        resolve(products);
                    },
                    error: function(xhr, status, error) {
                        $('#productDropdown').html('<option value="">Error loading products</option>');
                        reject(error);
                    }
                });
            });
        }

        // Load instructors dropdown (reusing existing users API)
        function loadInstructors() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/api/API/users',
                    type: 'GET',
                    success: function(users) {
                        var dropdown = $('#instructorDropdown');
                        dropdown.empty();
                        dropdown.append('<option value="">-- Select Instructor --</option>');
                        
                        users.forEach(function(user) {
                            dropdown.append(`<option value="${user.userId}">${user.fullName}</option>`);
                        });
                        resolve(users);
                    },
                    error: function(xhr, status, error) {
                        $('#instructorDropdown').html('<option value="">Error loading instructors</option>');
                        reject(error);
                    }
                });
            });
        }

        // Generic function to populate dropdowns
        function populateDropdown(selector, items, defaultText) {
            var dropdown = $(selector);
            dropdown.empty();
            dropdown.append(`<option value="">${defaultText}</option>`);
            
            items.forEach(function(item) {
                dropdown.append(`<option value="${item.value}">${item.text}</option>`);
            });
        }

        // Load course instance data for the current board
        function loadCourseInstance(boardId) {
            showMessage(`Loading course instance for Board ID: ${boardId}...`, 'info');
            
            $.ajax({
                url: `/api/API/courseinstance/${boardId}`,
                type: 'GET',
                success: function(courseInstance) {
                    console.log("Course instance loaded:", courseInstance);
                    originalData = courseInstance; // Store original data
                    populateFormWithData(courseInstance);
                    enterReadOnlyMode();
                    $('#dataStatus').html(`<span class="text-success">Data found and loaded</span>`);
                    showMessage('Course instance data loaded successfully!', 'success');
                },
                error: function(xhr, status, error) {
                    if (xhr.status === 404) {
                        $('#dataStatus').html(`<span class="text-warning">No data found - ready for new entry</span>`);
                        originalData = null;
                        clearForm();
                        enterEditMode(); // If no data found, start in edit mode
                        showMessage('No course instance found - you can create a new one', 'success');
                    } else {
                        $('#dataStatus').html(`<span class="text-danger">Error loading data</span>`);
                        showMessage('Error loading course instance data', 'error');
                    }
                    console.error("Error loading course instance:", error);
                }
            });
        }

        // Populate form fields with course instance data
        function populateFormWithData(data) {
            console.log("Populating form with data:", data);
            
            // Small delay to ensure dropdowns are fully rendered
            setTimeout(function() {
                $('#courseDropdown').val(data.courseId || '');
                $('#versionTitle').val(data.versionTitle || '');
                $('#languageDropdown').val(data.languageId || '');
                $('#productDropdown').val(data.productId || '');
                $('#instructorDropdown').val(data.instructorId || '');
                $('#description').val(data.description || '');
                $('#lessons').val(data.lessons || '');
                $('#fileLocation').val(data.fileLocation || '');
                $('#revisionFlip').prop('checked', data.revisionFlip || false);
                
                console.log("Form populated with values:", {
                    courseId: $('#courseDropdown').val(),
                    languageId: $('#languageDropdown').val(),
                    productId: $('#productDropdown').val(),
                    instructorId: $('#instructorDropdown').val()
                });
            }, 100); // 100ms delay to ensure DOM is ready
        }

        // Clear all form fields
        function clearForm() {
            $('#courseDropdown').val('');
            $('#versionTitle').val('');
            $('#languageDropdown').val('');
            $('#productDropdown').val('');
            $('#instructorDropdown').val('');
            $('#description').val('');
            $('#lessons').val('');
            $('#fileLocation').val('');
            $('#revisionFlip').prop('checked', false);
            $('#dataStatus').text('Form cleared');
        }

        // Save course instance data
        function saveCourseInstance() {
            if (!currentBoardId) {
                showMessage('No Board ID available for saving', 'error');
                return;
            }

            // Validate required fields
            if (!$('#courseDropdown').val()) {
                showMessage('Please select a course before saving', 'error');
                return;
            }

            // Gather form data
            var courseInstanceData = {
                boardId: parseInt(currentBoardId),
                courseId: parseInt($('#courseDropdown').val()) || null,
                versionTitle: $('#versionTitle').val() || null,
                languageId: parseInt($('#languageDropdown').val()) || null,
                productId: parseInt($('#productDropdown').val()) || null,
                instructorId: parseInt($('#instructorDropdown').val()) || null,
                description: $('#description').val() || null,
                lessons: parseInt($('#lessons').val()) || null,
                fileLocation: $('#fileLocation').val() || null,
                revisionFlip: $('#revisionFlip').is(':checked')
            };

            console.log("Saving course instance data:", courseInstanceData);
            showMessage('Saving course instance...', 'info');

            // Send POST request to save
            $.ajax({
                url: '/api/API/courseinstance',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(courseInstanceData),
                success: function(response) {
                    console.log("Save successful:", response);
                    $('#dataStatus').html(`<span class="text-success">Data saved successfully</span>`);
                    showMessage(response.message, 'success');
                    
                    // Reload the data to show what was saved and enter read-only mode
                    loadCourseInstance(currentBoardId);
                },
                error: function(xhr, status, error) {
                    console.error("Save failed:", xhr.responseText);
                    $('#dataStatus').html(`<span class="text-danger">Save failed</span>`);
                    
                    try {
                        var errorResponse = JSON.parse(xhr.responseText);
                        showMessage(errorResponse.message || 'Error saving course instance', 'error');
                    } catch (e) {
                        showMessage('Error saving course instance', 'error');
                    }
                }
            });
        }

        // Enter edit mode - make fields editable and show edit buttons
        function enterEditMode() {
            isEditMode = true;
            
            // Enable all form fields
            $('#courseDropdown').prop('disabled', false);
            $('#versionTitle').prop('disabled', false);
            $('#languageDropdown').prop('disabled', false);
            $('#productDropdown').prop('disabled', false);
            $('#instructorDropdown').prop('disabled', false);
            $('#description').prop('disabled', false);
            $('#lessons').prop('disabled', false);
            $('#fileLocation').prop('disabled', false);
            $('#revisionFlip').prop('disabled', false);
            
            // Show edit mode buttons, hide read-only buttons
            $('#editModeButtons').show();
            $('#readOnlyButtons').hide();
            
            console.log("Entered edit mode");
        }

        // Enter read-only mode - lock fields and show edit button
        function enterReadOnlyMode() {
            isEditMode = false;
            
            // Disable all form fields
            $('#courseDropdown').prop('disabled', true);
            $('#versionTitle').prop('disabled', true);
            $('#languageDropdown').prop('disabled', true);
            $('#productDropdown').prop('disabled', true);
            $('#instructorDropdown').prop('disabled', true);
            $('#description').prop('disabled', true);
            $('#lessons').prop('disabled', true);
            $('#fileLocation').prop('disabled', true);
            $('#revisionFlip').prop('disabled', true);
            
            // Show read-only buttons, hide edit mode buttons
            $('#editModeButtons').hide();
            $('#readOnlyButtons').show();
            
            console.log("Entered read-only mode");
        }

        // Cancel edit - restore original data and return to read-only mode
        function cancelEdit() {
            if (originalData) {
                // Restore original data
                populateFormWithData(originalData);
                enterReadOnlyMode();
                $('#dataStatus').html(`<span class="text-info">Changes cancelled</span>`);
                showMessage('Edit cancelled - original data restored', 'success');
            } else {
                // If no original data (new record), just clear and stay in edit mode
                clearForm();
                $('#dataStatus').html(`<span class="text-info">New entry cleared</span>`);
                showMessage('New entry cleared', 'success');
            }
        }

        // Helper function to show messages
        function showMessage(message, type) {
            if (type === 'success') {
                $('#successText').text(message);
                $('#successMessage').show();
                $('#errorMessage').hide();
                setTimeout(function() {
                    $('#successMessage').fadeOut();
                }, 3000);
            } else if (type === 'error') {
                $('#errorText').text(message);
                $('#errorMessage').show();
                $('#successMessage').hide();
            } else if (type === 'info') {
                console.log("INFO:", message);
            }
        }
        // Monday SDK Integration - moved inside main script block
        // Monday SDK variables
        const monday = window.mondaySdk();
        let mondayBoardId = null;
        let isMondayContext = false;

        console.log("Monday SDK initialized within main script");

        // Listen for Monday context (production) - this will override development settings
        monday.listen("context", res => {
            console.log("Monday context received:", res);
            if (res.data && res.data.boardId) {
                mondayBoardId = res.data.boardId.toString();
                isMondayContext = true;
                console.log("Board ID from Monday (overriding development):", mondayBoardId);
                
                // Initialize the app with Monday board ID (this overrides development settings)
                initializeApp(mondayBoardId);
            } else {
                console.log("Monday context received but no boardId found:", res);
            }
        });

    </script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>
