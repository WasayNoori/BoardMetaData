{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasay\\\\source\\\\repos\\\\WasayNoori\\\\BoardMetaData\\\\docs-viewer\\\\src\\\\App.js\";\nimport React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"typeface-roboto\";\nimport AppContainerComponent from \"./components/app-container/app-container-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getSettings = res => {\n      this.setState({\n        settings: res.data\n      });\n    };\n    this.getContext = res => {\n      this.setState({\n        context: res.data\n      }, this.fetchBoards);\n    };\n    this.fetchBoards = () => {\n      const {\n        context\n      } = this.state;\n      monday.api(`\n    query {\n      me {\n        name\n      }\n      \n      boards(ids:[${context.boardIds}]) {\n        name\n        \n        columns {\n          title\n          id\n          type\n        }\n        \n        groups {\n          title\n          id\n        }\n        \n        items {\n          name\n          group {\n            id\n          }\n          \n          column_values {\n            id\n            value\n            text\n          }\n        }\n      }\n    } \n    `).then(res => this.setState({\n        me: res.data.me,\n        boards: res.data.boards\n      }));\n    };\n    this.renderCell = (board, column, item) => {\n      const columnValue = item.column_values.find(columnValue => columnValue.id == column.id);\n      const text = column.type == \"name\" ? item.name : columnValue && columnValue.text;\n      return text;\n    };\n    this.renderItem = (board, item) => {\n      const {\n        columns\n      } = board;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          children: this.renderCell(board, column, item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this);\n    };\n    this.renderGroup = (board, group) => {\n      const {\n        columns\n      } = board;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-title\",\n          children: columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell\",\n            children: column.type == \"name\" ? group.title : column.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-items\",\n          children: group.items.map(item => this.renderItem(board, item))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this);\n    };\n    this.getGroups = board => {\n      const {\n        settings\n      } = this.state;\n      const {\n        groupByColumn\n      } = settings;\n      const groupByColumnId = groupByColumn ? Object.keys(groupByColumn)[0] : null;\n      const groups = {};\n      for (const item of board.items) {\n        const groupId = groupByColumnId ? this.getColumnValue(item, groupByColumnId).text : item.group.id;\n        if (!groups[groupId]) {\n          const groupTitle = groupByColumnId ? groupId : board.groups.find(group => group.id == groupId).title;\n          groups[groupId] = {\n            items: [],\n            id: groupId,\n            title: groupTitle\n          };\n        }\n        groups[groupId].items.push(item);\n      }\n      return Object.values(groups);\n    };\n    this.renderBoard = board => {\n      const {\n        settings\n      } = this.state;\n      const groups = this.getGroups(board);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: {\n          background: settings.color\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-name\",\n          children: board.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-groups\",\n          children: groups.map(group => this.renderGroup(board, group))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this);\n    };\n    this.state = {\n      settings: {},\n      context: {},\n      me: {},\n      boards: []\n    };\n  }\n  componentDidMount() {\n    monday.listen(\"settings\", this.getSettings);\n    monday.listen(\"context\", this.getContext);\n  }\n  getColumnValue(item, columnId) {\n    return item.column_values.find(columnValue => columnValue.id == columnId) || {};\n  }\n  render() {\n    const {\n      me,\n      boards\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monday-app\",\n      children: /*#__PURE__*/_jsxDEV(AppContainerComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","mondaySdk","AppContainerComponent","jsxDEV","_jsxDEV","monday","App","Component","constructor","props","getSettings","res","setState","settings","data","getContext","context","fetchBoards","state","api","boardIds","then","me","boards","renderCell","board","column","item","columnValue","column_values","find","id","text","type","name","renderItem","columns","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","renderGroup","group","title","items","getGroups","groupByColumn","groupByColumnId","Object","keys","groups","groupId","getColumnValue","groupTitle","push","values","renderBoard","style","background","color","componentDidMount","listen","columnId","render"],"sources":["C:/Users/wasay/source/repos/WasayNoori/BoardMetaData/docs-viewer/src/App.js"],"sourcesContent":["import React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"typeface-roboto\";\nimport AppContainerComponent from \"./components/app-container/app-container-component\";\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { settings: {}, context: {}, me: {}, boards: [] };\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", this.getSettings);\n    monday.listen(\"context\", this.getContext);\n  }\n\n  getSettings = (res) => {\n    this.setState({ settings: res.data });\n  };\n\n  getContext = (res) => {\n    this.setState({ context: res.data }, this.fetchBoards);\n  };\n\n  fetchBoards = () => {\n    const { context } = this.state;\n    monday\n      .api(\n        `\n    query {\n      me {\n        name\n      }\n      \n      boards(ids:[${context.boardIds}]) {\n        name\n        \n        columns {\n          title\n          id\n          type\n        }\n        \n        groups {\n          title\n          id\n        }\n        \n        items {\n          name\n          group {\n            id\n          }\n          \n          column_values {\n            id\n            value\n            text\n          }\n        }\n      }\n    } \n    `\n      )\n      .then((res) => this.setState({ me: res.data.me, boards: res.data.boards }));\n  };\n\n  renderCell = (board, column, item) => {\n    const columnValue = item.column_values.find((columnValue) => columnValue.id == column.id);\n    const text = column.type == \"name\" ? item.name : columnValue && columnValue.text;\n    return text;\n  };\n\n  renderItem = (board, item) => {\n    const { columns } = board;\n    return (\n      <div className=\"item\">\n        {columns.map((column) => (\n          <div className=\"cell\">{this.renderCell(board, column, item)}</div>\n        ))}\n      </div>\n    );\n  };\n\n  renderGroup = (board, group) => {\n    const { columns } = board;\n    return (\n      <div className=\"group\">\n        <div className=\"group-title\">\n          {columns.map((column) => (\n            <div className=\"cell\">{column.type == \"name\" ? group.title : column.title}</div>\n          ))}\n        </div>\n        <div className=\"group-items\">{group.items.map((item) => this.renderItem(board, item))}</div>\n      </div>\n    );\n  };\n\n  getColumnValue(item, columnId) {\n    return item.column_values.find((columnValue) => columnValue.id == columnId) || {};\n  }\n\n  getGroups = (board) => {\n    const { settings } = this.state;\n    const { groupByColumn } = settings;\n    const groupByColumnId = groupByColumn ? Object.keys(groupByColumn)[0] : null;\n\n    const groups = {};\n    for (const item of board.items) {\n      const groupId = groupByColumnId ? this.getColumnValue(item, groupByColumnId).text : item.group.id;\n      if (!groups[groupId]) {\n        const groupTitle = groupByColumnId ? groupId : board.groups.find((group) => group.id == groupId).title;\n        groups[groupId] = { items: [], id: groupId, title: groupTitle };\n      }\n      groups[groupId].items.push(item);\n    }\n\n    return Object.values(groups);\n  };\n\n  renderBoard = (board) => {\n    const { settings } = this.state;\n    const groups = this.getGroups(board);\n\n    return (\n      <div className=\"board\" style={{ background: settings.color }}>\n        <div className=\"board-name\">{board.name}</div>\n        <div className=\"board-groups\">{groups.map((group) => this.renderGroup(board, group))}</div>\n      </div>\n    );\n  };\n\n  render() {\n    const { me, boards } = this.state;\n    return (\n      <div className=\"monday-app\">\n        <AppContainerComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}