import { listAppBuilds } from './app-builds-service.js';
import { listAppFeaturesByAppVersionId } from './app-features-service.js';
import { listAppVersionsByAppId } from './app-versions-service.js';
import { listApps } from './apps-service.js';
import { PromptService } from './prompt-service.js';
export const DynamicChoicesService = {
    async chooseApp() {
        const apps = await listApps();
        const appChoicesMap = {};
        for (const app of apps) {
            appChoicesMap[`${app.id} | ${app.name}`] = app.id;
        }
        const selectedAppKey = await PromptService.promptSelectionWithAutoComplete('Select an app', Object.keys(appChoicesMap));
        const selectedAppId = appChoicesMap[selectedAppKey];
        return selectedAppId;
    },
    async chooseAppVersion(appId, filterByStatus) {
        let appVersions = await listAppVersionsByAppId(appId);
        if (filterByStatus) {
            appVersions = appVersions.filter(appVersion => filterByStatus.includes(appVersion.status));
        }
        const appVersionChoicesMap = {};
        for (const appVersion of appVersions) {
            appVersionChoicesMap[`${appVersion.id} | ${appVersion.versionNumber} | ${appVersion.name} | ${appVersion.status}`] = appVersion.id;
        }
        const selectedAppVersionKey = await PromptService.promptSelectionWithAutoComplete('Select an app version', Object.keys(appVersionChoicesMap));
        const selectedAppVersionId = appVersionChoicesMap[selectedAppVersionKey];
        return selectedAppVersionId;
    },
    async chooseAppAndAppVersion(filterByStatus, appId) {
        const chosenAppId = appId || (await this.chooseApp());
        const appVersionId = await this.chooseAppVersion(chosenAppId, filterByStatus);
        return { appId: chosenAppId, appVersionId };
    },
    async chooseBuild(appVersionId) {
        const appReleases = await listAppBuilds(appVersionId);
        const appReleaseChoicesMap = {};
        for (const appRelease of appReleases) {
            appReleaseChoicesMap[`${appRelease.id} | ${appRelease.category} | | ${appRelease.data?.url || ' '}`] =
                appRelease.id;
        }
        const selectedAppReleaseKey = await PromptService.promptSelectionWithAutoComplete('Select a build', Object.keys(appReleaseChoicesMap));
        const selectedAppReleaseId = appReleaseChoicesMap[selectedAppReleaseKey];
        return selectedAppReleaseId;
    },
    async chooseAppFeature(appVersionId, options) {
        const appFeatures = await listAppFeaturesByAppVersionId(appVersionId, options);
        const appFeatureChoicesMap = {};
        for (const appFeature of appFeatures) {
            appFeatureChoicesMap[`${appFeature.id} | ${appFeature.name} | ${appFeature.type}`] = appFeature;
        }
        const selectedAppFeatureKey = await PromptService.promptSelectionWithAutoComplete('Select an app feature', Object.keys(appFeatureChoicesMap));
        return appFeatureChoicesMap[selectedAppFeatureKey];
    },
};
